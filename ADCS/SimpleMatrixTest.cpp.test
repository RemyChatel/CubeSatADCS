#include "mbed.h"
#include "SimpleMatrix.h"

using namespace SimpleMatrix;

void printVec(Vector a);

void printMat(Matrix a);

Serial pc(USBTX, USBRX, 115200);

int main(){
    pc.printf("\n\r\n\r\n\r\n\r\n\r\n\r");
    pc.printf("--------------------------------------\n\r\n\r");
    /* SimpleMatrix Vector Test 
    float coef[3] = {4.0f, 5.0f , 3.0f} ;
    Vector a(coef);
    coef[0] = -6.8f;
    coef[1] = (float)(4.0e-2);
    coef[2] = 12.0f;
    Vector b(coef);

    pc.printf("Vector a\n\r");
    printVec(a);
    pc.printf("Vector b\n\r");
    printVec(b);

    pc.printf("Assignement c = b and testing modification of b\n\r");
    Vector c;
    c = b;
    printVec(c);
    b.setCoef(2, 0.0);
    pc.printf("b: ");
    printVec(b);
    pc.printf("c: ");
    printVec(c);
    b.setCoef(coef);

    pc.printf("Addition (a+b)\n\r");
    printVec(a+b);
    pc.printf("Addition (b += a)\n\r");
    b += a;
    printVec(b);
    b = Vector(coef); // reseting b to original

    pc.printf("Substraction (b-a) (expected [ -10.8, -4.96, 9 ]\n\r");
    printVec(b-a);
    pc.printf("Substraction (b -= a)\n\r");
    b -= a;
    printVec(b);
    b = Vector(coef); // reseting b to original

    pc.printf("Scalar multiplication (2*b) then (b*2) then b*=2\n\r");
    printVec(2.0f * b);
    printVec(b * 2.0f);
    b *= 2.0f;
    printVec(b);
    b = Vector(coef);

    pc.printf("Scalar division (b/2) then b/=2\n\r");
    printVec(b / 2.0f);
    b /= 2.0f;
    printVec(b);
    b = Vector(coef);

    pc.printf("Norm of a (expected 7.07107)\n\r");
    pc.printf("%f\n\r", a.norm());

    pc.printf("Normalize a (expected [ 0.565685, 0.707107, 0.424264 ]\n\r");
    Vector d = Vector(a);
    d.normalize();
    printVec(d);

    pc.printf("Dot product transpose(a) * b or a.b (expected 9.0)\n\r");
    pc.printf("%f\n\r", b.dot(a));

    pc.printf("Cross product axb [ 59.88, -68.4, 34.16 ]\n\r");
    printVec(a.cross(b));

    */

    /* SimpleMatrix Matrix Test */

    float coefA[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    float coefB[9] = {10, 12, 13, 14, 15, 16, 17, 18, 19};
    float coef1[3] = {3.8f,5.2f,8.4f};
    float coef2[3] = {9.1f,2.7f,0.2f};
    Matrix a(coefA),b(coefB);
    Vector vec1(coef1),vec2(coef2);

    pc.printf("Matrix A\n\r");
    printMat(a);
    pc.printf("Matrix B\n\r");
    printMat(b);
    
    pc.printf("Assignement C = B\n\r");
    Matrix c;
    c = b;
    printMat(c);
    b.setCoef(0, 0.0f);
    pc.printf("B :\n\r");
    printMat(b);
    pc.printf("C :\n\r");
    printMat(c);
    b.setCoef(coefB);

    pc.printf("Addition A+B\n\r");
    printMat(a+b);

    pc.printf("Addition A+=B\n\r");
    a+=b;
    printMat(a);
    a = Matrix(coefA);

    pc.printf("Substraction A-B\n\r");
    printMat(a-b);

    pc.printf("Substraction A-=B\n\r");
    a-=b;
    printMat(a);
    a = Matrix(coefA);

    pc.printf("Multiplication A*2\n\r");
    printMat(a*2);

    pc.printf("Multiplication 2*A\n\r");
    printMat(2*a);

    pc.printf("Multiplication A*=2\n\r");
    a*=2;
    printMat(a);
    a = Matrix(coefA);
    
    pc.printf("Multiplication A*B {{89, 96, 102}, {212, 231, 246}, {335, 366, 390}}\n\r");
    printMat(a*b);

    pc.printf("Multiplication A*=B {{89, 96, 102}, {212, 231, 246}, {335, 366, 390}}\n\r");
    a*=b;
    printMat(a);

    pc.printf("Multiplication A*vec1 {39.4, 91.6, 143.8}\n\r");
    printVec(a*vec1);

    pc.printf("Multiplication vec1*A {83.4, 100.8, 118.2}\n\r");
    printVec(vec1*a);

    pc.printf("Scalar division A / 2\n\r");
    printMat(a/2);

    pc.printf("Scalar division A /= 2\n\r");
    a /= 2;
    printMat(a);
    a = Matrix(coefA);

    pc.printf("Determinant det(A) (expected 0)\n\r");
    pc.printf("%f\n\r", a.det());

    pc.printf("Determinant det(B) (expected 3)\n\r");
    pc.printf("%f\n\r", b.det());

    pc.printf("Trace tr(A) (15)\n\r");
    pc.printf("%f\n\r", a.tr());

    pc.printf("Trace tr(B) (44)\n\r");
    pc.printf("%f\n\r", b.tr());

    pc.printf("Transpose transpose(A)\n\r");
    printMat(a.transpose());

    pc.printf("Classical adjoint adj(A) {{-3, 6, -3}, {6, -12, 6}, {-3, 6, -3}}\n\r");
    printMat(a.adj());
    a = Matrix(coefA);

    // pc.printf("Inverse of B matrix inv(B) {{-1, 2, -1}, {2, -10.33, 7.33}, {-1, 8, -6}} \n\r");
    // printMat(b.inv());

}

void printVec(Vector a){
    float pcoef[3];
    a.getCoef(pcoef);
    pc.printf("[ %f, %f, %f ]\n\r", pcoef[0], pcoef[1], pcoef[2]);
}

void printMat(Matrix a){
    float pcoef[9];
    a.getCoef(pcoef);
    pc.printf("[[ %f, %f, %f ]\n\r" , pcoef[0], pcoef[1], pcoef[2]);
    pc.printf(" [ %f, %f, %f ]\n\r" , pcoef[3], pcoef[4], pcoef[5]);
    pc.printf(" [ %f, %f, %f ]]\n\r", pcoef[6], pcoef[7], pcoef[8]);
}