Vector 1
{{ 3.800000},
 { 5.200000},
 { 8.400000}}
Vector 2
{{ 9.100000},
 { 2.700000},
 { 0.200000}}
Assignement c = vec2 and testing modification of b
{{ 9.100000},
 { 2.700000},
 { 0.200000}}
b: {{ 9.100000},
 { 10.000000},
 { 0.200000}}
c: {{ 9.100000},
 { 2.700000},
 { 0.200000}}

Addition (vec1+vec2) (expected {12.9, 7.9, 8.6})
{{ 12.900001},
 { 7.900000},
 { 8.599999}}
vec2 :
{{ 9.100000},
 { 2.700000},
 { 0.200000}}
Addition (vec2 += vec1)
{{ 12.900001},
 { 7.900000},
 { 8.599999}}
{{ 9.100000},
 { 2.700000},
 { 0.200000}}
Substraction (vec2-vec1) (expected {5.3, -2.5, -8.2})
{{ 5.300000},
 {-2.500000},
 {-8.200000}}
Substraction (vec2 -= vec1)
{{ 5.300000},
 {-2.500000},
 {-8.200000}}

Scalar multiplication (2*vec2) then (vec2*2) then b*=2
{{ 18.200001},
 { 5.400000},
 { 0.400000}}
{{ 18.200001},
 { 5.400000},
 { 0.400000}}
{{ 18.200001},
 { 5.400000},
 { 0.400000}}

Norm of vec1 (expected 10.5849)
10.584894
Dot product transpose(vec1) * vec2 or vec1.vec2 (expected 50.3)
50.300003
Cross product vec1 x vec2 {-21.64, 75.68, -37.06}
{{-21.639999},
 { 75.680000},
 {-37.059998}}
Vector to matrix product vec1 * transpose(vec2) (expected
{{34.58, 10.26, 0.76}, {47.32, 14.04, 1.04}, {76.44, 22.68, 1.68}})
{{ 34.580002,  10.260000,  0.760000},
 { 47.320000,  14.040000,  1.040000},
 { 76.440002,  22.680000,  1.680000}}


Matrix A
{{ 1.000000,  2.000000,  3.000000},
 { 4.000000,  5.000000,  6.000000},
 { 7.000000,  8.000000,  9.000000}}
Matrix B
{{ 10.000000,  12.000000,  13.000000},
 { 14.000000,  15.000000,  16.000000},
 { 17.000000,  18.000000,  19.000000}}
Assignement C = B
{{ 10.000000,  12.000000,  13.000000},
 { 14.000000,  15.000000,  16.000000},
 { 17.000000,  18.000000,  19.000000}}
B :
{{ 0.000000,  12.000000,  13.000000},
 { 14.000000,  15.000000,  16.000000},
 { 17.000000,  18.000000,  19.000000}}
C :
{{ 10.000000,  12.000000,  13.000000},
 { 14.000000,  15.000000,  16.000000},
 { 17.000000,  18.000000,  19.000000}}

Addition A+B
{{ 11.000000,  14.000000,  16.000000},
 { 18.000000,  20.000000,  22.000000},
 { 24.000000,  26.000000,  28.000000}}

Addition A+=B
{{ 11.000000,  14.000000,  16.000000},
 { 18.000000,  20.000000,  22.000000},
 { 24.000000,  26.000000,  28.000000}}
Substraction A-B
{{-9.000000, -10.000000, -10.000000},
 {-10.000000, -10.000000, -10.000000},
 {-10.000000, -10.000000, -10.000000}}
Substraction A-=B
{{-9.000000, -10.000000, -10.000000},
 {-10.000000, -10.000000, -10.000000},
 {-10.000000, -10.000000, -10.000000}}

Multiplication A*2
{{ 2.000000,  4.000000,  6.000000},
 { 8.000000,  10.000000,  12.000000},
 { 14.000000,  16.000000,  18.000000}}
Multiplication 2*A
{{ 2.000000,  4.000000,  6.000000},
 { 8.000000,  10.000000,  12.000000},
 { 14.000000,  16.000000,  18.000000}}
Multiplication A*=2
{{ 2.000000,  4.000000,  6.000000},
 { 8.000000,  10.000000,  12.000000},
 { 14.000000,  16.000000,  18.000000}}
Multiplication A*B {{89, 96, 102}, {212, 231, 246}, {335, 366, 390}}
{{ 89.000000,  96.000000,  102.000000},
 { 212.000000,  231.000000,  246.000000},
 { 335.000000,  366.000000,  390.000000}}
Multiplication A*=B {{89, 96, 102}, {212, 231, 246}, {335, 366, 390}}
{{ 89.000000,  96.000000,  102.000000},
 { 212.000000,  231.000000,  246.000000},
 { 335.000000,  366.000000,  390.000000}}
Multiplication B * A {{149, 184, 219}, {186, 231, 276}, {222, 276, 330}}
{{ 149.000000,  184.000000,  219.000000},
 { 186.000000,  231.000000,  276.000000},
 { 222.000000,  276.000000,  330.000000}}
Multiplication A*vec1 {39.4, 91.6, 143.8}
{{ 39.399998},
 { 91.599998},
 { 143.799988}}
Multiplication vec1*A {83.4, 100.8, 118.2}
{{ 83.399994,  100.799995,  118.199997}}

Determinant det(A) (expected 0)
0.000000
Determinant det(B) (expected 3)
3.000000
Trace tr(A) (15)
15.000000
Trace tr(B) (44)
44.000000
Transpose transpose(B)
{{ 10.000000,  14.000000,  17.000000},
 { 12.000000,  15.000000,  18.000000},
 { 13.000000,  16.000000,  19.000000}}
Inverse of B matrix inv(B) {{-1, 2, -1}, {2, -10.33, 7.33}, {-1, 8, -6}}
{{-1.000000,  2.000000, -1.000000},
 { 2.000000, -10.333334,  7.333333},
 {-1.000000,  8.000000, -6.000000}}
Test of vector packing
{{ 1.000000,  2.000000,  3.000000,  4.000000,  5.000000,  6.000000,  7.000000,  8.000000,  9.000000}}
Test of getCoef
{1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 6.000000, 7.000000, 8.000000, 9.000000, }


Assignation test
{{ 1.000000,  2.000000,  3.000000},
 { 4.000000,  5.000000,  6.000000},
 { 7.000000,  8.000000,  9.000000}}
{{ 1.000000,  30.000000,  3.000000},
 { 4.000000,  25.000000,  6.000000},
 { 7.000000,  8.000000,  9.000000}}

 << test
{{ 19.000000,  18.000000,  17.000000},
 { 16.000000,  15.000000,  14.000000},
 { 13.000000,  12.000000,  11.000000}}
<< test on vector
{{      0},
 {      0},
 {      0}}
{{     12},
 {     18},
 {     30}}


Kinematic methods test
Rotation around X of 60
{{ 1.000000,  0.000000,  0.000000},
 { 0.000000,  0.500000,  0.866025},
 { 0.000000, -0.866025,  0.500000}}
Rotation around Y of 60
{{ 0.500000,  0.000000, -0.866025},
 { 0.000000,  1.000000,  0.000000},
 { 0.866025,  0.000000,  0.500000}}
Rotation around Z of 60
{{ 0.500000,  0.866025,  0.000000},
 {-0.866025,  0.500000,  0.000000},
 { 0.000000,  0.000000,  1.000000}}

Euler angles (in deg):
{{ 45.000000},
 {-30.000000},
 { 60.000000}}
Euler to Quaternion
{{ 0.723317},
 { 0.439680},
 {-0.022260},
 { 0.531976}}
Euler to 1-2-3 Rotation matrix
{{ 0.433013,  0.435596,  0.789149},
 {-0.750000,  0.659739,  0.047367},
 {-0.500000, -0.612372,  0.612372}}
Euler to 3-2-1 Rotation matrix
{{ 0.433013,  0.750000,  0.500000},
 {-0.789149,  0.047367,  0.612372},
 { 0.435596, -0.659739,  0.612372}}
Quaternion to Euler
{{ 45.000004},
 {-30.000000},
 { 60.000004}}
Quaternion to Rotation matrix
{{ 0.433013,  0.750000,  0.500000},
 {-0.789149,  0.047367,  0.612373},
 { 0.435596, -0.659740,  0.612372}}
Rotation matrix to Euler
{{-47.132423},
 {-35.425190},
 {-61.246056}}
Rotation matrix to quaternion
{{ 0.723317},
 { 0.439680},
 {-0.022260},
 { 0.531976}}
Rotation matrix 321
{{ 0.433013,  0.750000,  0.500000},
 {-0.789149,  0.047367,  0.612372},
 { 0.435596, -0.659739,  0.612372}}
Diagonal matrix:
{{      5,       0,       0,       0},
 {      0,       6,       0,       0},
 {      0,       0,       7,       0},
 {      0,       0,       0,       8}}
Error in operator *: Dimensions mismatch


Quaternion
q1:
{{ 0.079324},
 { 0.560843},
 {-0.290980},
 { 0.753516}}
q2:
{{-0.302377},
 {-0.460457},
 { 0.295403},
 {-0.799420}}
q1 x q2 (expected {0.92259,-0.19609,0.21281,-0.25957})
{{ 0.922590},
 {-0.196087},
 { 0.212806},
 {-0.259568}}
norm of q1 0.986556

Full Inverse of B matrix inv(B)
{{83.910759, -2.546317, -2.366193, -5.454593, -0.256995, -0.007957,  0.147196},
 {-2.546317, 85.153450, -0.599367,  2.584253, -0.270148,  0.156115,  0.047621},
 {-2.366192, -0.599367, 78.592087,-15.324805,  0.004844,  0.034120, -0.415823},
 {-5.454591,  2.584253,-15.324805, 80.194611,  0.041871,  0.152784, -0.061284},
 {-0.256995, -0.270148,  0.004844,  0.041871,  3.957679,  0.011317, -0.004554},
 {-0.007957,  0.156115,  0.034120,  0.152784,  0.011317,  3.964703,  0.021746},
 { 0.147196,  0.047621, -0.415823, -0.061284, -0.004554,  0.021746,  3.904088}}
Execution time: 1183.516968 ms

Approximate Inverse of B matrix inv(B)
{{83.887398, -2.541156, -2.418018, -5.477917, -0.257147, -0.007306,  0.146325},
 {-2.541156, 85.150139, -0.581224,  2.572856, -0.270174,  0.155936,  0.047500},
 {-2.418018, -0.581224, 78.451195,-15.321637,  0.004642,  0.035691, -0.416633},
 {-5.477918,  2.572856,-15.321637, 80.036850,  0.041356,  0.153132, -0.064784},
 {-0.257147, -0.270174,  0.004642,  0.041356,  3.957675,  0.011320, -0.004565},
 {-0.007306,  0.155936,  0.035691,  0.153132,  0.011320,  3.964684,  0.021764},
 { 0.146325,  0.047500, -0.416633, -0.064784, -0.004565,  0.021764,  3.904003}}
Execution time: 4.172000 ms

From numpy.linalg.inv
{{83.910756, -2.546317, -2.366192, -5.454592, -0.256994, -0.007956,  0.147195}
 {-2.546317, 85.153444, -0.599366,  2.584252, -0.270148,  0.156115,  0.047621}
 {-2.366192, -0.599366, 78.592075, -15.32480,  0.004844,  0.034119, -0.415823}
 {-5.454592,  2.584252,-15.324805,  80.19461,  0.041871,  0.152784, -0.061284}
 {-0.256994, -0.270148,  0.004844,  0.041871,  3.957678,  0.011316, -0.004554}
 {-0.007956,  0.156115,  0.034119,  0.152784,  0.011316,  3.964702,  0.021745}
 { 0.147195,  0.047621, -0.415823, -0.061284, -0.004554,  0.021745,  3.904088}}

Relative error matrix for TaylorInv (in percent)
{0.005, 0.005, 0.235, 0.221, 0.019, 1.161, 0.206,
 0.005, 0.001, 0.337, 0.156, 0.004, 0.008, 0.160,
 0.235, 0.336, 0.002, 0.208, 2.221, 0.279, 0.174,
 0.221, 0.156, 0.208, 0.001, 0.120, 0.236, 0.359,
 0.019, 0.004, 2.221, 0.120, 0.000, 0.006, 0.040,
 1.161, 0.008, 0.279, 0.236, 0.006, 0.000, 0.037,
 0.206, 0.160, 0.174, 0.359, 0.040, 0.037, 0.000}
Execution time: 5.399 ms

Relative error matrix for Inv (in percent)
{0.000, 0.000, 0.000, 0.000, 0.000, 0.011, 0.001,
 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001,
 0.000, 0.000, 0.000, 0.000, 0.004, 0.002, 0.000,
 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001,
 0.000, 0.000, 0.004, 0.000, 0.000, 0.006, 0.000,
 0.010, 0.000, 0.002, 0.000, 0.006, 0.000, 0.003,
 0.001, 0.001, 0.000, 0.001, 0.000, 0.003, 0.000}
Execution time: 1183.517 ms